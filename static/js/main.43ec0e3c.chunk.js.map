{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","src","alt","CardList","robots","map","user","i","key","SearchBox","onTyping","onChange","type","placeholder","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kUAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCHSC,G,YAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACvB,OACE,yBAAKF,GAAG,QACN,yBAAKG,IAAG,+BAA0BH,GAAMI,IAAI,UAC5C,6BACE,4BAAKH,GACL,2BAAIC,OCcGG,G,MAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,yBAAKN,GAAG,YAEJM,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CACEC,IAAKJ,EAAOG,GAAGT,GACfA,GAAIM,EAAOG,GAAGT,GACdC,KAAMK,EAAOG,GAAGR,KAChBC,MAAOI,EAAOG,GAAGP,cCChBS,G,MAZG,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,OACE,yBAAKZ,GAAG,aACN,2BACEa,SAAUD,EACVE,KAAK,SACLC,YAAY,qBCiCLC,E,YApCb,aAAe,IAAD,8BACZ,+CAaFC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACXjB,OAAQ,GACRc,YAAa,IAJH,E,iFAQO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEb,OAAQsB,S,+BAO/B,IAAD,OACDC,EAAiBC,KAAKP,MAAMjB,OAAOyB,QAAO,SAAAC,GAC9C,OAAOA,EAAM/B,KAAKgC,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAElE,OAAkC,IAA7BH,KAAKP,MAAMjB,OAAO6B,OACd,0CAGL,yBAAKnC,GAAG,OACN,2CACA,kBAAC,EAAD,CAAWY,SAAYkB,KAAKb,iBAC5B,kBAAC,EAAD,CAAUX,OAAUuB,S,GA9BZO,aCMlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SLwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.43ec0e3c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport './Card.css';\n\nconst Card = ({id, name, email}) => {\n  return(\n    <div id=\"card\">\n      <img src={`https://robohash.org/${id}`} alt=\"Robot\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\nimport './CardList.css';\n\nconst CardList = ({ robots }) => {\n  return(\n    <div id=\"cardList\">    \n      {\n        robots.map((user, i) => {\n          return(\n            <Card\n              key={robots[i].id}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n            />\n          )\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\nimport './SearchBox.css';\n\nconst SearchBox = ({ onTyping }) => {\n  return(\n    <div id=\"SearchBox\">\n      <input\n        onChange={onTyping}\n        type=\"search\"\n        placeholder=\"Search Robots\"\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React,{ Component } from 'react';\nimport './App.css';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ robots: users }))\n  }\n\n  onSearchChange = event => {\n    this.setState({ searchField: event.target.value })\n  }\n\n  render() {\n    const filteredRobots = this.state.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n    })\n    if ( this.state.robots.length === 0 ) {\n      return <h1>Loading...</h1>\n    }else {\n      return(\n        <div id=\"app\">\n          <h1>RoboFriends</h1>\n          <SearchBox onTyping= { this.onSearchChange } />\n          <CardList robots= { filteredRobots } />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { Provider } from 'react-redux';\n// import { createStore } from 'redux';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\n// import { searchRobots } from './reducers';\n\n// const store = createStore(searchRobots);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}